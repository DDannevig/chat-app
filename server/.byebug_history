c
channel.present?
quit
channel
c
users
n
c
ActionCable.server.pubsub.redis_connection_for_subscriptions.smembers("active_on_channel_#{key}")
c
key
c
Chat::Message.create(channel: channel, user: current_user, message: message)
Chat::Message.create(private: true, channel: channel, user: current_user, message: message)
channel
c
channel
n
"user_id_#{user_id}"
message
user_id
c
current_user.id.to_s
params[:channel_name]
c
params[:channel_name] == current_user.id.to_s
params[:channel_name] == current_user.id
params[:channel_name]
current_user
c
self.subscriptions.identifiers.count
self.subscriptions.identifiers
self.subscriptions
c
identifier['channel_name'] == key
identifier['channel_name']
v
identifier
n
unparsed_identifier
c
key
c
self.subscriptions.identifiers.any?
self.subscriptions.identifiers
c
JSON.parse(self.subscriptions.identifiers.first)
JSON.parse(self.subscriptions.identifiers)
self.subscriptions.identifiers
self.subscriptions.methods
self.subscriptions.subscriptions
self.subscriptions
c
self.subscriptions
self.subscriptions.subscriptions
self.subscriptions
self.subscriptions.subscriptions
self.subscriptions
self.connections
self
broadcasting_for
ActionCable.server.config.cable[:channel_prefix]
current_user.connections
current_user.methods
current_user
c
current_user
message
channel
c
channel
c
ActionCable.server.broadcast("private_channel_#{channel.key}", action_cable_message)
channel.key
c
public_message
channel.private
c
channel.private?
channel.private
c
params
c
params
c
n
websocket_message
s
up
s
c
n
parsed_data['command'].present?
parsed_data['command']
c
parsed_data
c
parsed_data[:command].present?
c
ActionCable.server.pubsub.subscribe(self, "something_channel_asd")
ActionCable.server.pubsub.subscribe(self, "something_channel_asd").methods
ActionCable.server.pubsub.subscribe(self, "something_channel_asd")
c
ActionCable.server.pubsub.subscribe(
ActionCable.server.pubsub.subscribe
ActionCable.server.pubsub.methods
ActionCable.server.pubsub.subscriptions
ActionCable.server.pubsub
ActionCable.server.cable
ActionCable.server.subscriptions
ActionCable.server
ActionCable.subscriptions
ActionCable
c
ActionCable::Channel::Base.new(self, "something_channel_asd")
ActionCable::Channel::Base.save(self, "something_channel_asd")
ActionCable::Channel::Base.create(self, "something_channel_asd")
ActionCable::Channel::Base.new(self, "something_channel_asd")
ActionCable::Channel.new
ActionCable::Channel::SomethingChannel
ActionCable::Channel
ActionCable::Chanbel
ActionCable::Chanel
ApplicationCable::Channel
Channel
Something
SomethingChannel
c
ActionCable::Channel::Base.new(self, "something_channel_asd").subscribe_to_channel
ActionCable::Channel::Base.new(self, "something_channel_asd")
c
ActionCable::Channel::Base.new(self, "chat_api_development:public_channel_#{key}").subscribe_to_channel
"public_channel_#{key}"
c
ActionCable::Channel::Base.new(self, "public_channel_#{key}").subscribe_to_channel
c
ActionCable::Channel::Base.new(self, "public_channel_#{key}").subscribe_to_channel
ActionCable::Channel::Base.new(self, "public_channel_#{key}").current_user
ActionCable::Channel::Base.new(self, "public_channel_#{key}").methods
ActionCable::Channel::Base.new(self, "public_channel_#{key}").save
ActionCable::Channel::Base.new(self, "public_channel_#{key}")
key
c
Y
QUIT
C
ActionCable::Channel::Base.new(self, "public_channel_#{key}", { command: "subscribe", identifier: "identifier" })
ActionCable::Channel::Base.new(self, "public_channel_#{key}", { command: "subscribe", identifier: identifier })
self
ActionCable::Channel::Base.new(self, 
ActionCable::Channel::Base
ActionCable::Channel
ActionCable
c
"public_channel_#{key}"
c
ActionCable::Channel.stream_for
ActionCable::Channel.descendants
ActionCable::Channel.methods
ActionCable::Channel
ActionCable::PublicChannel
ActionCable::Channel::Public
ActionCable::Channel::PublicChannel
ActionCable::Channel
ActionCable::Connection::PublicChannel
ActionCable::Connection::InternalChannel::PublicChannel
ActionCable::Connection::InternalChannel.descendents
ActionCable::Connection::InternalChannel.descendants
ActionCable::Connection::InternalChannel.methods
ActionCable::Connection::InternalChannel
ActionCable::Connection
ActionCable
Channels
Channel
PublicChannel
ApplicationCable::PublicChannel
ApplicationCable::Channel
PublicChannel
c
PublicChannel
ApplicationCable::Channel
ApplicationCable::Channels
ApplicationCable
ApplicationChannel
PublicChannel
Channel
c
self.methods
Channels
c
ApplicationCable.methods
ApplicationCable.channels
ApplicationCable
ApplicationCable::Channels
ApplicationCable::Channel
c
ApplicationCable::Channels
s
ApplicationCable::Channel
ApplicationCable
ApplicationCable.instance_methods
ApplicationCable.methods
ApplicationCable.descendants
ApplicationCable::PublicChannel
ApplicationCable::Channel
ApplicationCable
Public
PublicChannel
self.server.pubsub
self.server
self
self.pubsub.subscribe
self.pubsub.methods
self.pubsub
self.methods
self
self.channels
self
Channels::PublicChannel
Channels
Channel
ActionCable::Channel::Base::Public
ActionCable::Channel::Base.channel_name
ActionCable::Channel::Base.methods
ActionCable::Channel.methods
ActionCable::Channel.descendants
ActionCable::Channel::Base.descendants
ActionCable::Channel::Base.descendents
ActionCable::Channel::Base.methods
ActionCable::Channel::Base::PublicChannel
ActionCable::Channel::Base
ActionCable::Channel
PublicChannel
ApplicationCable::PublicChannel
ActionCable::Channel::PublicChannel
ActionCable::Channel
c
cc
self.pubsub.subscribe(self, "public_channels_#{key}")
self.pubsub.subscribe("public_channels_#{key}", )
self.pubsub.subscribe
self.pubsub
self.subscriptions
self.methods
self
self.public_channel
self.channels
self
c
"public_channel_#{channel.key}"
c
stream_from
stream_for
c
stream_from
ActionCable.server.pubsub.broadcast(identifier, subscription_message)
